# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Diff {
  bombs: Float!
  characteristic: String!
  chroma: Boolean!
  cinema: Boolean!
  difficulty: String!
  events: Float!
  length: Float!
  me: Boolean!
  ne: Boolean!
  njs: Float!
  notes: Float!
  nps: Float!
  obstacles: Float!
  offset: Float!
  paritySummary: ParitySummary!
  seconds: Float!
  stars: Float!
}

type ParitySummary {
  errors: Float!
  resets: Float!
  warns: Float!
}

type Query {
  getScores(song_id: String!, user_ids: [String!] = []): [Score!]!
  getSong(id: String!): Song!
  getSongFromHash(hash: String!): Song!
  getSongFromKey(key: String!): Song!
  getUser(id: String!): User!
}

type Score {
  bad_cuts: Float!
  created_at: DateTime!
  difficulty: String!
  hmd: String!
  id: String!
  misses: Float!
  modifiers: Float!
  percent: Float!
  score: Float!
  song: Song!
  song_id: String!
  updated_at: DateTime!
  user: User!
  user_id: String!
}

type Song {
  cover: String!
  created_at: DateTime!
  difficulties: [Diff!]!
  hash: String!
  id: String!
  key: String!
  level_author_name: String!
  name: String!
  scores(skip: Int = 0, take: Int = 25): [Score!]!
  song_author_name: String!
  sub_name: String!
  updated_at: DateTime!
}

type User {
  created_at: DateTime!
  id: String!
  img: String!
  name: String!
  updated_at: DateTime!
}
